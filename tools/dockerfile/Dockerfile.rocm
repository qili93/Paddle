# A image for building paddle binaries
# Use rocm-terminal base image for both rocm environment
# When you modify it, please be aware of rocm version
# ROCM 3.5.1 docker build:
# docker build -f tools/dockerfile/Dockerfile.rocm \
#                 --build-arg ROCM_VERSION=3.5.1 \
#                 -t paddlepaddle/paddle-rocm-dev:3.5.1 .
# ROCM 3.5.1 docker run:
# docker run -it --device=/dev/kfd --device=/dev/dri \
# --security-opt seccomp=unconfined --group-add video \
# paddlepaddle/paddle-rocm-dev:3.5.1 /bin/bash

FROM ubuntu:18.04
MAINTAINER PaddlePaddle Authors <paddle-dev@baidu.com>

# 添加proxy - 开头
ENV http_proxy=http://172.19.56.199:3128
ENV https_proxy=http://172.19.56.199:3128
ENV ftp_proxy=http://172.19.56.199:3128

# ENV variables
ARG WITH_GPU
ARG WITH_ROCM_PLATFORM

ENV WITH_GPU=${WITH_GPU:-OFF}
ENV WITH_ROCM_PLATFORM=${WITH_ROCM_PLATFORM:-ON}

ENV HOME /root
ENV DEBIAN_FRONTEND=noninteractive

# Add bash enhancements
COPY paddle/scripts/docker/root/ /root/

# Update Environment
RUN apt-get update && apt-get upgrade -y
RUN apt-get update && apt-get install -y apt-utils sudo

# Update Timezone
RUN apt install tzdata && \
    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata

# Location
RUN apt-get update && apt-get install -y locales && locale-gen en_US.UTF-8
    ENV LANG="en_US.UTF-8"
    ENV LANGUAGE="en_US.UTF-8"
    ENV LC_ALL="en_US.UTF-8"

RUN apt-get update && \
    apt-get install -y make cmake build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev openmpi-bin openmpi-doc libopenmpi-dev \
    git vim texinfo patchelf openssl unzip pciutils net-tools python-pip python-dev \
    python-opencv python-matplotlib

# Downgrade gcc&&g++
WORKDIR /usr/bin
COPY tools/dockerfile/gcc-8.2 /usr/local/gcc-8.2
# COPY tools/dockerfile/build_scripts /build_scripts
# RUN bash /build_scripts/install_gcc.sh gcc82 && rm -rf /build_scripts 
RUN cp gcc gcc.bak && cp g++ g++.bak && rm gcc && rm g++  && \
    ln -s /usr/local/gcc-8.2/bin/gcc /usr/local/bin/gcc  && \
    ln -s /usr/local/gcc-8.2/bin/g++ /usr/local/bin/g++  && \
    ln -s /usr/local/gcc-8.2/bin/gcc /usr/bin/gcc  && \
    ln -s /usr/local/gcc-8.2/bin/g++ /usr/bin/g++
ENV PATH=/usr/local/gcc-8.2/bin:$PATH
RUN echo "export PATH=/usr/local/gcc-8.2/bin:\${PATH}" >> ~/.bashrc

# install cmake
WORKDIR /opt
RUN wget -q https://cmake.org/files/v3.16/cmake-3.16.0-Linux-x86_64.tar.gz && \
    tar -zxf cmake-3.16.0-Linux-x86_64.tar.gz && rm cmake-3.16.0-Linux-x86_64.tar.gz
ENV PATH=/opt/cmake-3.16.0-Linux-x86_64/bin:$PATH
RUN echo "export PATH=/opt/cmake-3.16.0-Linux-x86_64/bin:\${PATH}" >> ~/.bashrc

# Install Go and glide
RUN wget -qO- https://paddle-ci.cdn.bcebos.com/go1.8.1.linux-amd64.tar.gz | \
    tar -xz -C /usr/local && \
    mkdir /root/gopath && \
    mkdir /root/gopath/bin && \
    mkdir /root/gopath/src
ENV GOROOT=/usr/local/go GOPATH=/root/gopath
# should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.
ENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
RUN echo "GOROOT=/usr/local/go" >> ~/.bashrc && \
    echo "GOPATH=/root/gopath" >> ~/.bashrc && \
    echo "export PATH=\${PATH}:\${GOROOT}/bin:\${GOPATH}/bin" >> ~/.bashrc

# install glide
RUN curl -s -q https://glide.sh/get | sh

# git credential to skip password typing
RUN git config --global credential.helper store

# Fix locales to en_US.UTF-8
RUN localedef -i en_US -f UTF-8 en_US.UTF-8

RUN apt-get update && \
    apt-get install -y python2.7 python2.7-dev \
    python3.6 python3.6-dev \
    python3.7 python3.7-dev \
    python3.8 python3.8-dev \
    python3-distutils && \
    curl https://bootstrap.pypa.io/get-pip.py -o - | python2.7 && \
    curl https://bootstrap.pypa.io/get-pip.py -o - | python3.6 && \
    curl https://bootstrap.pypa.io/get-pip.py -o - | python3.7 && \
    curl https://bootstrap.pypa.io/get-pip.py -o - | python3.8 && \
    rm /usr/bin/python && ln -s /usr/bin/python2.7 /usr/bin/python && \
    rm /usr/bin/python3 && ln -s /usr/bin/python3.7 /usr/bin/python3 && \
    rm /usr/local/bin/pip && ln -s /usr/local/bin/pip2.7 /usr/local/bin/pip && \
    rm /usr/local/bin/pip3 && ln -s /usr/local/bin/pip3.7 /usr/local/bin/pip3

RUN pip3 --no-cache-dir install pre-commit==1.10.4 ipython==5.3.0 && \
    pip3 --no-cache-dir install ipykernel==4.6.0 wheel && \
    pip3.6 --no-cache-dir install pre-commit==1.10.4 ipython==5.3.0 && \
    pip3.6 --no-cache-dir install ipykernel==4.6.0 wheel && \
    pip3.8 --no-cache-dir install pre-commit==1.10.4 ipython==5.3.0 && \
    pip3.8 --no-cache-dir install ipykernel==4.6.0 wheel && \
    pip --no-cache-dir install pre-commit==1.10.4 ipython==5.3.0 && \
    pip --no-cache-dir install ipykernel==4.6.0 wheel 

#For docstring checker
RUN pip3 --no-cache-dir install pylint pytest astroid isort && \
    pip3.6 --no-cache-dir install pylint pytest astroid isort && \
    pip3.8 --no-cache-dir install pylint pytest astroid isort && \
    pip --no-cache-dir install pylint pytest astroid isort

COPY ./python/requirements.txt /root/
RUN pip3 --no-cache-dir install -r /root/requirements.txt && \
    pip3.6 --no-cache-dir install -r /root/requirements.txt && \
    pip3.8 --no-cache-dir install -r /root/requirements.txt && \
    pip --no-cache-dir install -r /root/requirements.txt && \
    rm -rf /root/requirements.txt

COPY ./python/unittest_py/requirements.txt /root/
RUN pip3 --no-cache-dir install -r /root/requirements.txt && \
    pip3.6 --no-cache-dir install -r /root/requirements.txt && \
    pip3.8 --no-cache-dir install -r /root/requirements.txt && \
    pip --no-cache-dir install -r /root/requirements.txt && \
    rm -rf /root/requirements.txt

RUN apt-get install libprotobuf-dev -y

# Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service
RUN apt-get update && apt-get install -y openssh-server
RUN mkdir /var/run/sshd && echo 'root:root' | chpasswd && \
    sed -ri 's/^#?PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config
CMD source ~/.bashrc

# ccache 3.7.9
RUN wget https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \
    tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \
    ./configure -prefix=/usr/local/ccache-3.7.9 && \
    make -j8 && make install && \
    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache && \
    rm -rf /opt/ccache-3.7.9.tar.gz && rm -rf /opt/ccache-3.7.9

# Install rocm
ARG ROCM_VERSION
COPY tools/dockerfile/build_scripts/install_rocm.sh install_rocm.sh
RUN bash ./install_rocm.sh
RUN rm install_rocm.sh
ENV PATH=/opt/rocm/bin:$PATH
ENV PATH=/opt/rocm/hcc/bin:$PATH
ENV PATH=/opt/rocm/hip/bin:$PATH
ENV PATH=/opt/rocm/opencl/bin:$PATH
ENV PATH=/opt/rocm/llvm/bin:$PATH
RUN echo "export PATH=/opt/rocm/bin:/opt/rocm/hcc/bin:/opt/rocm/hip/bin:/opt/rocm/opencl/bin:/opt/rocm/llvm/bin:\${PATH}" >> ~/.bashrc

# fix rocthrust
RUN sed -i '21 a #include <thrust/system/hip/config.h>' /opt/rocm/include/thrust/system/hip/detail/error.inl

# add gdb and lldb
RUN apt-get update && apt-get install gdb lldb -y

# clang-form 3.8.0
RUN wget https://paddle-ci.cdn.bcebos.com/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz && \ 
    tar xf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz && cd clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04 && \
    cp -r * /usr/local && cd .. && rm -rf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04 && rm -rf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz 
ENV PATH=/usr/local/bin:$PATH
RUN echo "export PATH=/usr/local/bin:\${PATH}" >> ~/.bashrc

# Cleanup
RUN apt-get autoclean && apt-get clean

# 删除proxy - 结尾
ENV http_proxy=
ENV https_proxy=
ENV ftp_proxy=

EXPOSE 22
